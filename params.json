{"name":"Modelstore","tagline":"Java library holding a generic model intended as the underyling model of an Eclipse GEF editor.","body":"<div id=\"table-of-contents\">\r\n<h2>Table of Contents</h2>\r\n<div id=\"text-table-of-contents\">\r\n<ul>\r\n<li><a href=\"#sec-1\">1. What is this?</a></li>\r\n<li><a href=\"#sec-2\">2. Development stuff</a></li>\r\n<li><a href=\"#sec-3\">3. Roadmap <code>[1/19]</code></a>\r\n<ul>\r\n<li><a href=\"#sec-3-1\">3.1. <span class=\"done nilDONE\">DONE</span> Fix the test coverage of all property values (hashCode, equals and toString ruined coverage)</a></li>\r\n<li><a href=\"#sec-3-2\">3.2. <span class=\"todo nilTODO\">TODO</span> Put javadoc from travis builds on the web</a></li>\r\n<li><a href=\"#sec-3-3\">3.3. <span class=\"todo nilTODO\">TODO</span> Add javadocs to everything</a></li>\r\n<li><a href=\"#sec-3-4\">3.4. <span class=\"todo nilTODO\">TODO</span> Refactor the propertyvalue creation into something that makes sense for a library bundle</a></li>\r\n<li><a href=\"#sec-3-5\">3.5. <span class=\"todo nilTODO\">TODO</span> Add clone operation to Propertyset</a></li>\r\n<li><a href=\"#sec-3-6\">3.6. <span class=\"todo nilTODO\">TODO</span> Add lazy copy-on-read for complex properties (possibly just do shallow copy-on-read?)</a></li>\r\n<li><a href=\"#sec-3-7\">3.7. <span class=\"todo nilTODO\">TODO</span> Add shallow copy-on-read for list properties</a></li>\r\n<li><a href=\"#sec-3-8\">3.8. <span class=\"todo nilTODO\">TODO</span> Put some basic aspects in place (object, relationship, model, aspectcontainer)</a></li>\r\n<li><a href=\"#sec-3-9\">3.9. <span class=\"todo nilTODO\">TODO</span> Add AspectViwer (connected to aspect container and used as a filter)</a></li>\r\n<li><a href=\"#sec-3-10\">3.10. <span class=\"todo nilTODO\">TODO</span> Test serialization/deserialization using YAML (YAML has object id and object reference)</a></li>\r\n<li><a href=\"#sec-3-11\">3.11. <span class=\"todo nilTODO\">TODO</span> Split off ModelContext/PropertyContext</a>\r\n<ul>\r\n<li><a href=\"#sec-3-11-1\">3.11.1. <span class=\"todo nilTODO\">TODO</span> Persist and instantiation should use with ModelContext/PropertyContext</a></li>\r\n<li><a href=\"#sec-3-11-2\">3.11.2. <span class=\"todo nilTODO\">TODO</span> Store metadata (last modification time, at first)</a></li>\r\n<li><a href=\"#sec-3-11-3\">3.11.3. <span class=\"todo nilTODO\">TODO</span> Create a clone operation (shallow collection copy, propertyvalues are immutable)</a></li>\r\n<li><a href=\"#sec-3-11-4\">3.11.4. <span class=\"todo nilTODO\">TODO</span> Create a merge operation that will merge all aspects and propertysets</a></li>\r\n<li><a href=\"#sec-3-11-5\">3.11.5. <span class=\"todo nilTODO\">TODO</span> Move ModelContext/PropertyContext to a library bundle (or possibly one with a factory service for modelcontexts?)</a></li>\r\n<li><a href=\"#sec-3-11-6\">3.11.6. <span class=\"todo nilTODO\">TODO</span> Move Jackson serialization to a separate bundle (maybe a library bundle?)</a></li>\r\n</ul>\r\n</li>\r\n<li><a href=\"#sec-3-12\">3.12. <span class=\"todo nilTODO\">TODO</span> Storage based on SQL for relationships and references and individual JSON files</a>\r\n<ul>\r\n<li><a href=\"#sec-3-12-1\">3.12.1. <span class=\"todo nilTODO\">TODO</span> Individual Propertyset files git versioned</a></li>\r\n<li><a href=\"#sec-3-12-2\">3.12.2. <span class=\"todo nilTODO\">TODO</span> Metatada into the RDBMS</a></li>\r\n</ul>\r\n</li>\r\n<li><a href=\"#sec-3-13\">3.13. <span class=\"todo nilTODO\">TODO</span> Storage based on PostgreSQL with native JSON support</a></li>\r\n<li><a href=\"#sec-3-14\">3.14. <span class=\"todo nilTODO\">TODO</span> Connect a minimal hardcoded model to eclipse GEF</a></li>\r\n<li><a href=\"#sec-3-15\">3.15. <span class=\"todo nilTODO\">TODO</span> Implement JSON storage for eclipse GEF models</a></li>\r\n<li><a href=\"#sec-3-16\">3.16. <span class=\"todo nilTODO\">TODO</span> Get PropertysetManager with storage running in Karaf</a></li>\r\n<li><a href=\"#sec-3-17\">3.17. <span class=\"todo nilTODO\">TODO</span> Create a RESTful API and a storage/persist mechanism on top of it</a></li>\r\n<li><a href=\"#sec-3-18\">3.18. <span class=\"todo nilTODO\">TODO</span> Create a query language (or find something usable and implement/use)</a></li>\r\n<li><a href=\"#sec-3-19\">3.19. <span class=\"todo nilTODO\">TODO</span> Lag en s-expression-factory for jackson</a></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</div>\r\n</div>\r\n\r\n# What is this?<a id=\"sec-1\"></a>\r\n\r\nThis is a small Java library intended to hold a model consisting of objects and relations in memory.\r\n\r\nThe main use case for this library is to be used as a generic model container for an Eclipse GEF editor.  Because of this, and because it does no harm, and because I kind of like OSGi, this library is packaged as an OSGi bundle.\r\n\r\nThe API is meant to be as clutter-free as possbile in use: it should throw no exceptions, and it should return no nulls (instead of null it will return the empty string, empty collections and zero values for the numeric types).\r\n\r\nThe PropertySet interface defines the API of objects that forms both objects and relationships of the model.\r\n\r\nThis library is licensed under the Eclipse Public License.  See the\r\nfile LICENSE for the terms and specifics of the license.\r\n\r\n# Development stuff<a id=\"sec-2\"></a>\r\n\r\n[<https://travis-ci.org/steinarb/modelstore.png?branch=master>](https://travis-ci.org/steinarb/modelstore) [<https://coveralls.io/repos/steinarb/modelstore/badge.svg?branch=master>](https://coveralls.io/r/steinarb/modelstore?branch=master)\r\n\r\n-   [Source code repository](https://github.com/steinarb/modelstore)\r\n-   [Continous integration build on Travis CI](https://travis-ci.org/steinarb/modelstore)\r\n-   [Test coverage history on coveralls](https://coveralls.io/r/steinarb/modelstore)\r\n\r\n# Roadmap <code>[1/19]</code><a id=\"sec-3\"></a>\r\n\r\n## DONE Fix the test coverage of all property values (hashCode, equals and toString ruined coverage)<a id=\"sec-3-1\"></a>\r\n\r\n## TODO Put javadoc from travis builds on the web<a id=\"sec-3-2\"></a>\r\n\r\n-   Could be my own server\r\n-   Could be [a github web site](http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/)\r\n\r\n## TODO Add javadocs to everything<a id=\"sec-3-3\"></a>\r\n\r\n## TODO Refactor the propertyvalue creation into something that makes sense for a library bundle<a id=\"sec-3-4\"></a>\r\n\r\n-   Maybe a static method on the PropertyValue interface, if that's possible?\r\n\r\n## TODO Add clone operation to Propertyset<a id=\"sec-3-5\"></a>\r\n\r\n## TODO Add lazy copy-on-read for complex properties (possibly just do shallow copy-on-read?)<a id=\"sec-3-6\"></a>\r\n\r\n-   Can it be possible to skip this for serialization?\r\n    -   Or is the cost of shallow copies so low compared to the serialization that it doesn't really matter?\r\n\r\n## TODO Add shallow copy-on-read for list properties<a id=\"sec-3-7\"></a>\r\n\r\n## TODO Put some basic aspects in place (object, relationship, model, aspectcontainer)<a id=\"sec-3-8\"></a>\r\n\r\n## TODO Add AspectViwer (connected to aspect container and used as a filter)<a id=\"sec-3-9\"></a>\r\n\r\n## TODO Test serialization/deserialization using YAML (YAML has object id and object reference)<a id=\"sec-3-10\"></a>\r\n\r\n## TODO Split off ModelContext/PropertyContext<a id=\"sec-3-11\"></a>\r\n\r\n-   PropertysetManager will be the access point for creating and saving ModelContext instances\r\n-   This is an approach at making the system multithreaded and performant\r\n    -   Minimal locking on the propertysets themselves, because there is only on thread using them at a time\r\n    -   No need to copy the property values, because they are immutable (except for complexproperty and listproperty, that is&#x2026;)\r\n        -   Use shallow copy on list and complex object property get, perhaps?\r\n\r\n### TODO Persist and instantiation should use with ModelContext/PropertyContext<a id=\"sec-3-11-1\"></a>\r\n\r\n### TODO Store metadata (last modification time, at first)<a id=\"sec-3-11-2\"></a>\r\n\r\n### TODO Create a clone operation (shallow collection copy, propertyvalues are immutable)<a id=\"sec-3-11-3\"></a>\r\n\r\n### TODO Create a merge operation that will merge all aspects and propertysets<a id=\"sec-3-11-4\"></a>\r\n\r\n### TODO Move ModelContext/PropertyContext to a library bundle (or possibly one with a factory service for modelcontexts?)<a id=\"sec-3-11-5\"></a>\r\n\r\n-   Alternatively:\r\n    -   Just move the interface definitions to a separate bundle\r\n        -   Does this have any benefits\r\n\r\n### TODO Move Jackson serialization to a separate bundle (maybe a library bundle?)<a id=\"sec-3-11-6\"></a>\r\n\r\n## TODO Storage based on SQL for relationships and references and individual JSON files<a id=\"sec-3-12\"></a>\r\n\r\n### TODO Individual Propertyset files git versioned<a id=\"sec-3-12-1\"></a>\r\n\r\n### TODO Metatada into the RDBMS<a id=\"sec-3-12-2\"></a>\r\n\r\n-   Per propertyset load time\r\n-   Per propertyset last modified time\r\n-   Propertyset delete time\r\n\r\n## TODO Storage based on PostgreSQL with native JSON support<a id=\"sec-3-13\"></a>\r\n\r\n## TODO Connect a minimal hardcoded model to eclipse GEF<a id=\"sec-3-14\"></a>\r\n\r\n## TODO Implement JSON storage for eclipse GEF models<a id=\"sec-3-15\"></a>\r\n\r\n## TODO Get PropertysetManager with storage running in Karaf<a id=\"sec-3-16\"></a>\r\n\r\n## TODO Create a RESTful API and a storage/persist mechanism on top of it<a id=\"sec-3-17\"></a>\r\n\r\n## TODO Create a query language (or find something usable and implement/use)<a id=\"sec-3-18\"></a>\r\n\r\n-   Possibilities\r\n    -   I like s-expressions\r\n    -   Is there something in JSON that could be used\r\n    -   Just implement something as nested complex objects and let its JSON representation be the wire format\r\n\r\n## TODO Lag en s-expression-factory for jackson<a id=\"sec-3-19\"></a>","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}