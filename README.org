* Modelstore: a typless modeling framework
** What is this?

 This is a small Java library intended to hold a model consisting of objects and relations in memory.

 The main use case for this library is to be used as a generic model container for an Eclipse GEF editor.  Because of this, and because it does no harm, and because I kind of like OSGi, this library is packaged as an OSGi bundle.

 The API is meant to be as clutter-free as possbile in use: it should throw no exceptions, and it should return no nulls (instead of null it will return the empty string, empty collections and zero values for the numeric types).

 The PropertySet interface defines the API of objects that forms both objects and relationships of the model.

 This library is licensed under the Eclipse Public License.  See the
 file LICENSE for the terms and specifics of the license.
** Development stuff

 [[https://travis-ci.org/steinarb/modelstore][file:https://travis-ci.org/steinarb/modelstore.png]] [[https://coveralls.io/r/steinarb/modelstore][file:https://coveralls.io/repos/steinarb/modelstore/badge.svg]]

  - [[https://github.com/steinarb/modelstore][Source code repository]]
  - [[https://travis-ci.org/steinarb/modelstore][Continous integration build on Travis CI]]
  - [[https://coveralls.io/r/steinarb/modelstore][Test coverage history on coveralls]]
  - [[http://steinarb.github.io/modelstore/javadoc/][javadoc generated by the latest travis build]]

* Roadmap [3/20]
** DONE Fix the test coverage of all property values (hashCode, equals and toString ruined coverage)
** DONE Put javadoc from travis builds on the web
** TODO Add javadocs to everything
** TODO Rename "propertyvalue" "value"

Having "property" in the name doesn't make sense for the list of values, and make the type names longer than they have to be.
** DONE Refactor the propertyvalue creation into something that makes sense for a library bundle
 - Maybe a static method on the PropertyValue interface, if that's possible?
 - Or make that creation methods on the interface, backed by a class with static methods?
** TODO Add clone operation to Propertyset
** TODO Add lazy copy-on-read for complex properties (possibly just do shallow copy-on-read?)
 - Can it be possible to skip this for serialization?
   - Or is the cost of shallow copies so low compared to the serialization that it doesn't really matter?
** TODO Add shallow copy-on-read for list properties
** TODO Put some basic aspects in place (object, relationship, model, aspectcontainer)
** TODO Add AspectViwer (connected to aspect container and used as a filter)
** TODO Test serialization/deserialization using YAML (YAML has object id and object reference)
** TODO Split off ModelContext/PropertyContext
 - PropertysetManager will be the access point for creating and saving ModelContext instances
 - This is an approach at making the system multithreaded and performant
   - Minimal locking on the propertysets themselves, because there is only on thread using them at a time
   - No need to copy the property values, because they are immutable (except for complexproperty and listproperty, that is...)
     - Use shallow copy on list and complex object property get, perhaps?
*** TODO Persist and instantiation should use with ModelContext/PropertyContext
*** TODO Store metadata (last modification time, at first)
*** TODO Create a clone operation (shallow collection copy, propertyvalues are immutable)
*** TODO Create a merge operation that will merge all aspects and propertysets
*** TODO Move ModelContext/PropertyContext to a library bundle (or possibly one with a factory service for modelcontexts?)
 - Alternatively:
   - Just move the interface definitions to a separate bundle
     - Does this have any benefits
*** TODO Move Jackson serialization to a separate bundle (maybe a library bundle?)
** TODO Storage based on SQL for relationships and references and individual JSON files
*** TODO Individual Propertyset files git versioned
*** TODO Metatada into the RDBMS
 - Per propertyset load time
 - Per propertyset last modified time
 - Propertyset delete time
** TODO Storage based on PostgreSQL with native JSON support
** TODO Connect a minimal hardcoded model to eclipse GEF
** TODO Implement JSON storage for eclipse GEF models
** TODO Get PropertysetManager with storage running in Karaf
** TODO Create a RESTful API and a storage/persist mechanism on top of it
** TODO Create a query language (or find something usable and implement/use)
 - Possibilities
   - I like s-expressions
   - Is there something in JSON that could be used
   - Just implement something as nested complex objects and let its JSON representation be the wire format
** TODO Lag en s-expression-factory for jackson
