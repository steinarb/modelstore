* What is this?

This is a small Java library intended to hold a model consisting of objects and relations in memory.

The main use case for this library is to be used as a generic model container for an Eclipse GEF editor.  Because of this, and because it does no harm, and because I kind of like OSGi, this library is packaged as an OSGi bundle.

The API is meant to be as clutter-free as possbile in use: it should throw no exceptions, and it should return no nulls (instead of null it will return the empty string, empty collections and zero values for the numeric types).

The PropertySet interface defines the API of objects that forms both objects and relationships of the model.

This library is licensed under the Eclipse Public License.  See the
file LICENSE for the terms and specifics of the license.
* Development stuff

[[https://travis-ci.org/steinarb/modelstore][file:https://travis-ci.org/steinarb/modelstore.png?branch=master]] [[https://coveralls.io/r/steinarb/modelstore?branch=master][file:https://coveralls.io/repos/steinarb/modelstore/badge.svg?branch=master]]

 - [[https://github.com/steinarb/modelstore][Source code repository]]
 - [[https://travis-ci.org/steinarb/modelstore][Continous integration build on Travis CI]]
 - [[https://coveralls.io/r/steinarb/modelstore][Test coverage history on coveralls]]

* Roadmap [0/7]
** TODO Fix the test coverage of all property values (hashCode, equals and toString ruined coverage)
** TODO Put some basic aspects in place (object, relationship, model)
** TODO Test serialization/deserialization using YAML (YAML has object id and object reference)
** TODO Split off ModelContext/PropertyContext
 - PropertysetManager will be the access point for creating and saving ModelContext instances
 - This is an approach at making the system multithreaded and performant
   - Minimal locking on the propertysets themselves, because there is only on thread using them at a time
   - No need to copy the property values, because they are immutable (except for complexproperty and listproperty, that is...)
     - Use shallow copy on list and complex object property get, perhaps?
*** TODO Persist and instantiation should use with ModelContext/PropertyContext
*** TODO Store metadata (last modification time, at first)
*** TODO Create a clone operation (shallow collection copy, propertyvalues are immutable)
*** TODO Create a merge operation that will merge all aspects and propertysets
** TODO Storage based on SQL for relationships and references and individual JSON files
*** TODO Individual files git versioned
** TODO Connect a minimal hardcoded model to eclipse GEF
** TODO Implement JSON storage for eclipse GEF models
